Templates:
 - consider defining what "template deployment completion" is
 - define what delete a deployed template means (done by labels? by recording
   created objects? by storing template at creation time?)
 - consider defining how to determine if a set of objects matches a template?
 - find a way to define bindable outputs from templates (credentials? k8s
   services? endpoints?)
 - consider defining standardised image url, provider name, doc url, support url
   template metadata names

Dashboard SSO:
 - is this relevant to OpenShift?  Could the Jenkins OAUTH make use of it?
   Should it be removed from the standard?  Rework suggested?

Plans:
 - are these relevant to OpenShift?  How?

Bindings:
 - what sort of semantics to we anticipate using?  How about returning nominated
   service names/endpoints & credentials (template-defined params and
   app-returned values)?
 - Store binding state somewhere?

IDs:
 - work out if we're the spec requires UUIDs or not, and where.
 - having named global ids, e.g. in the form com.mycorp.osev3/openshift/ruby-helloworld-sample
   would almost certainly be nicer than UUIDs.
 - mappings: organisation_guid & space_guid could potentially align to some sort
   of cluster and a namespace if we wanted them to?

Architecture:
 - asynchronous requests, persistent stores, long running workflow, etc.  Do we
   want/have to go there?
